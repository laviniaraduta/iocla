
do_overflow:     file format elf32-i386


Disassembly of section .init:

00000440 <_init>:
 440:	53                   	push   ebx
 441:	83 ec 08             	sub    esp,0x8
 444:	e8 e7 00 00 00       	call   530 <__x86.get_pc_thunk.bx>
 449:	81 c3 7b 1b 00 00    	add    ebx,0x1b7b
 44f:	8b 83 2c 00 00 00    	mov    eax,DWORD PTR [ebx+0x2c]
 455:	85 c0                	test   eax,eax
 457:	74 05                	je     45e <_init+0x1e>
 459:	e8 8a 00 00 00       	call   4e8 <__gmon_start__@plt>
 45e:	83 c4 08             	add    esp,0x8
 461:	5b                   	pop    ebx
 462:	c3                   	ret    

Disassembly of section .plt:

00000470 <.plt>:
 470:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
 476:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
 47c:	00 00                	add    BYTE PTR [eax],al
	...

00000480 <printf@plt>:
 480:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
 486:	68 00 00 00 00       	push   0x0
 48b:	e9 e0 ff ff ff       	jmp    470 <.plt>

00000490 <fgets@plt>:
 490:	ff a3 10 00 00 00    	jmp    DWORD PTR [ebx+0x10]
 496:	68 08 00 00 00       	push   0x8
 49b:	e9 d0 ff ff ff       	jmp    470 <.plt>

000004a0 <__stack_chk_fail@plt>:
 4a0:	ff a3 14 00 00 00    	jmp    DWORD PTR [ebx+0x14]
 4a6:	68 10 00 00 00       	push   0x10
 4ab:	e9 c0 ff ff ff       	jmp    470 <.plt>

000004b0 <puts@plt>:
 4b0:	ff a3 18 00 00 00    	jmp    DWORD PTR [ebx+0x18]
 4b6:	68 18 00 00 00       	push   0x18
 4bb:	e9 b0 ff ff ff       	jmp    470 <.plt>

000004c0 <strlen@plt>:
 4c0:	ff a3 1c 00 00 00    	jmp    DWORD PTR [ebx+0x1c]
 4c6:	68 20 00 00 00       	push   0x20
 4cb:	e9 a0 ff ff ff       	jmp    470 <.plt>

000004d0 <__libc_start_main@plt>:
 4d0:	ff a3 20 00 00 00    	jmp    DWORD PTR [ebx+0x20]
 4d6:	68 28 00 00 00       	push   0x28
 4db:	e9 90 ff ff ff       	jmp    470 <.plt>

Disassembly of section .plt.got:

000004e0 <__cxa_finalize@plt>:
 4e0:	ff a3 28 00 00 00    	jmp    DWORD PTR [ebx+0x28]
 4e6:	66 90                	xchg   ax,ax

000004e8 <__gmon_start__@plt>:
 4e8:	ff a3 2c 00 00 00    	jmp    DWORD PTR [ebx+0x2c]
 4ee:	66 90                	xchg   ax,ax

Disassembly of section .text:

000004f0 <_start>:
 4f0:	31 ed                	xor    ebp,ebp
 4f2:	5e                   	pop    esi
 4f3:	89 e1                	mov    ecx,esp
 4f5:	83 e4 f0             	and    esp,0xfffffff0
 4f8:	50                   	push   eax
 4f9:	54                   	push   esp
 4fa:	52                   	push   edx
 4fb:	e8 22 00 00 00       	call   522 <_start+0x32>
 500:	81 c3 c4 1a 00 00    	add    ebx,0x1ac4
 506:	8d 83 fc e7 ff ff    	lea    eax,[ebx-0x1804]
 50c:	50                   	push   eax
 50d:	8d 83 9c e7 ff ff    	lea    eax,[ebx-0x1864]
 513:	50                   	push   eax
 514:	51                   	push   ecx
 515:	56                   	push   esi
 516:	ff b3 34 00 00 00    	push   DWORD PTR [ebx+0x34]
 51c:	e8 af ff ff ff       	call   4d0 <__libc_start_main@plt>
 521:	f4                   	hlt    
 522:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 525:	c3                   	ret    
 526:	66 90                	xchg   ax,ax
 528:	66 90                	xchg   ax,ax
 52a:	66 90                	xchg   ax,ax
 52c:	66 90                	xchg   ax,ax
 52e:	66 90                	xchg   ax,ax

00000530 <__x86.get_pc_thunk.bx>:
 530:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 533:	c3                   	ret    
 534:	66 90                	xchg   ax,ax
 536:	66 90                	xchg   ax,ax
 538:	66 90                	xchg   ax,ax
 53a:	66 90                	xchg   ax,ax
 53c:	66 90                	xchg   ax,ax
 53e:	66 90                	xchg   ax,ax

00000540 <deregister_tm_clones>:
 540:	e8 e4 00 00 00       	call   629 <__x86.get_pc_thunk.dx>
 545:	81 c2 7f 1a 00 00    	add    edx,0x1a7f
 54b:	8d 8a 44 00 00 00    	lea    ecx,[edx+0x44]
 551:	8d 82 44 00 00 00    	lea    eax,[edx+0x44]
 557:	39 c8                	cmp    eax,ecx
 559:	74 1d                	je     578 <deregister_tm_clones+0x38>
 55b:	8b 82 24 00 00 00    	mov    eax,DWORD PTR [edx+0x24]
 561:	85 c0                	test   eax,eax
 563:	74 13                	je     578 <deregister_tm_clones+0x38>
 565:	55                   	push   ebp
 566:	89 e5                	mov    ebp,esp
 568:	83 ec 14             	sub    esp,0x14
 56b:	51                   	push   ecx
 56c:	ff d0                	call   eax
 56e:	83 c4 10             	add    esp,0x10
 571:	c9                   	leave  
 572:	c3                   	ret    
 573:	90                   	nop
 574:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
 578:	f3 c3                	repz ret 
 57a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

00000580 <register_tm_clones>:
 580:	e8 a4 00 00 00       	call   629 <__x86.get_pc_thunk.dx>
 585:	81 c2 3f 1a 00 00    	add    edx,0x1a3f
 58b:	55                   	push   ebp
 58c:	8d 8a 44 00 00 00    	lea    ecx,[edx+0x44]
 592:	8d 82 44 00 00 00    	lea    eax,[edx+0x44]
 598:	29 c8                	sub    eax,ecx
 59a:	89 e5                	mov    ebp,esp
 59c:	53                   	push   ebx
 59d:	c1 f8 02             	sar    eax,0x2
 5a0:	89 c3                	mov    ebx,eax
 5a2:	83 ec 04             	sub    esp,0x4
 5a5:	c1 eb 1f             	shr    ebx,0x1f
 5a8:	01 d8                	add    eax,ebx
 5aa:	d1 f8                	sar    eax,1
 5ac:	74 14                	je     5c2 <register_tm_clones+0x42>
 5ae:	8b 92 38 00 00 00    	mov    edx,DWORD PTR [edx+0x38]
 5b4:	85 d2                	test   edx,edx
 5b6:	74 0a                	je     5c2 <register_tm_clones+0x42>
 5b8:	83 ec 08             	sub    esp,0x8
 5bb:	50                   	push   eax
 5bc:	51                   	push   ecx
 5bd:	ff d2                	call   edx
 5bf:	83 c4 10             	add    esp,0x10
 5c2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
 5c5:	c9                   	leave  
 5c6:	c3                   	ret    
 5c7:	89 f6                	mov    esi,esi
 5c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

000005d0 <__do_global_dtors_aux>:
 5d0:	55                   	push   ebp
 5d1:	89 e5                	mov    ebp,esp
 5d3:	53                   	push   ebx
 5d4:	e8 57 ff ff ff       	call   530 <__x86.get_pc_thunk.bx>
 5d9:	81 c3 eb 19 00 00    	add    ebx,0x19eb
 5df:	83 ec 04             	sub    esp,0x4
 5e2:	80 bb 44 00 00 00 00 	cmp    BYTE PTR [ebx+0x44],0x0
 5e9:	75 27                	jne    612 <__do_global_dtors_aux+0x42>
 5eb:	8b 83 28 00 00 00    	mov    eax,DWORD PTR [ebx+0x28]
 5f1:	85 c0                	test   eax,eax
 5f3:	74 11                	je     606 <__do_global_dtors_aux+0x36>
 5f5:	83 ec 0c             	sub    esp,0xc
 5f8:	ff b3 40 00 00 00    	push   DWORD PTR [ebx+0x40]
 5fe:	e8 dd fe ff ff       	call   4e0 <__cxa_finalize@plt>
 603:	83 c4 10             	add    esp,0x10
 606:	e8 35 ff ff ff       	call   540 <deregister_tm_clones>
 60b:	c6 83 44 00 00 00 01 	mov    BYTE PTR [ebx+0x44],0x1
 612:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
 615:	c9                   	leave  
 616:	c3                   	ret    
 617:	89 f6                	mov    esi,esi
 619:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

00000620 <frame_dummy>:
 620:	55                   	push   ebp
 621:	89 e5                	mov    ebp,esp
 623:	5d                   	pop    ebp
 624:	e9 57 ff ff ff       	jmp    580 <register_tm_clones>

00000629 <__x86.get_pc_thunk.dx>:
 629:	8b 14 24             	mov    edx,DWORD PTR [esp]
 62c:	c3                   	ret    

0000062d <main>:
 62d:	8d 4c 24 04          	lea    ecx,[esp+0x4]
 631:	83 e4 f0             	and    esp,0xfffffff0
 634:	ff 71 fc             	push   DWORD PTR [ecx-0x4]
 637:	55                   	push   ebp
 638:	89 e5                	mov    ebp,esp
 63a:	53                   	push   ebx
 63b:	51                   	push   ecx
 63c:	83 ec 60             	sub    esp,0x60
 63f:	e8 ec fe ff ff       	call   530 <__x86.get_pc_thunk.bx>
 644:	81 c3 80 19 00 00    	add    ebx,0x1980
 64a:	65 a1 14 00 00 00    	mov    eax,gs:0x14
 650:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
 653:	31 c0                	xor    eax,eax
 655:	c7 45 a4 ce fa ed fe 	mov    DWORD PTR [ebp-0x5c],0xfeedface
 65c:	83 ec 0c             	sub    esp,0xc
 65f:	8d 83 3c e8 ff ff    	lea    eax,[ebx-0x17c4]
 665:	50                   	push   eax
 666:	e8 15 fe ff ff       	call   480 <printf@plt>
 66b:	83 c4 10             	add    esp,0x10
 66e:	8b 83 30 00 00 00    	mov    eax,DWORD PTR [ebx+0x30]
 674:	8b 00                	mov    eax,DWORD PTR [eax]
 676:	83 ec 04             	sub    esp,0x4
 679:	50                   	push   eax
 67a:	68 80 00 00 00       	push   0x80
 67f:	8d 45 b4             	lea    eax,[ebp-0x4c]
 682:	50                   	push   eax
 683:	e8 08 fe ff ff       	call   490 <fgets@plt>
 688:	83 c4 10             	add    esp,0x10
 68b:	83 ec 0c             	sub    esp,0xc
 68e:	8d 83 53 e8 ff ff    	lea    eax,[ebx-0x17ad]
 694:	50                   	push   eax
 695:	e8 e6 fd ff ff       	call   480 <printf@plt>
 69a:	83 c4 10             	add    esp,0x10
 69d:	83 ec 0c             	sub    esp,0xc
 6a0:	8d 45 b4             	lea    eax,[ebp-0x4c]
 6a3:	50                   	push   eax
 6a4:	e8 17 fe ff ff       	call   4c0 <strlen@plt>
 6a9:	83 c4 10             	add    esp,0x10
 6ac:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
 6af:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [ebp-0x60],0x0
 6b6:	eb 34                	jmp    6ec <main+0xbf>
 6b8:	8d 55 b4             	lea    edx,[ebp-0x4c]
 6bb:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
 6be:	01 d0                	add    eax,edx
 6c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 6c3:	0f be d0             	movsx  edx,al
 6c6:	8d 4d b4             	lea    ecx,[ebp-0x4c]
 6c9:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
 6cc:	01 c8                	add    eax,ecx
 6ce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 6d1:	0f be c0             	movsx  eax,al
 6d4:	83 ec 04             	sub    esp,0x4
 6d7:	52                   	push   edx
 6d8:	50                   	push   eax
 6d9:	8d 83 5f e8 ff ff    	lea    eax,[ebx-0x17a1]
 6df:	50                   	push   eax
 6e0:	e8 9b fd ff ff       	call   480 <printf@plt>
 6e5:	83 c4 10             	add    esp,0x10
 6e8:	83 45 a0 01          	add    DWORD PTR [ebp-0x60],0x1
 6ec:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
 6ef:	3b 45 a8             	cmp    eax,DWORD PTR [ebp-0x58]
 6f2:	72 c4                	jb     6b8 <main+0x8b>
 6f4:	83 ec 0c             	sub    esp,0xc
 6f7:	8d 83 69 e8 ff ff    	lea    eax,[ebx-0x1797]
 6fd:	50                   	push   eax
 6fe:	e8 ad fd ff ff       	call   4b0 <puts@plt>
 703:	83 c4 10             	add    esp,0x10
 706:	0f b6 45 b9          	movzx  eax,BYTE PTR [ebp-0x47]
 70a:	88 45 b2             	mov    BYTE PTR [ebp-0x4e],al
 70d:	81 7d a4 4d 49 41 55 	cmp    DWORD PTR [ebp-0x5c],0x5541494d
 714:	75 14                	jne    72a <main+0xfd>
 716:	83 ec 0c             	sub    esp,0xc
 719:	8d 83 6a e8 ff ff    	lea    eax,[ebx-0x1796]
 71f:	50                   	push   eax
 720:	e8 8b fd ff ff       	call   4b0 <puts@plt>
 725:	83 c4 10             	add    esp,0x10
 728:	eb 12                	jmp    73c <main+0x10f>
 72a:	83 ec 0c             	sub    esp,0xc
 72d:	8d 83 77 e8 ff ff    	lea    eax,[ebx-0x1789]
 733:	50                   	push   eax
 734:	e8 77 fd ff ff       	call   4b0 <puts@plt>
 739:	83 c4 10             	add    esp,0x10
 73c:	b8 00 00 00 00       	mov    eax,0x0
 741:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
 744:	65 33 0d 14 00 00 00 	xor    ecx,DWORD PTR gs:0x14
 74b:	74 05                	je     752 <main+0x125>
 74d:	e8 7e 00 00 00       	call   7d0 <__stack_chk_fail_local>
 752:	8d 65 f8             	lea    esp,[ebp-0x8]
 755:	59                   	pop    ecx
 756:	5b                   	pop    ebx
 757:	5d                   	pop    ebp
 758:	8d 61 fc             	lea    esp,[ecx-0x4]
 75b:	c3                   	ret    
 75c:	66 90                	xchg   ax,ax
 75e:	66 90                	xchg   ax,ax

00000760 <__libc_csu_init>:
 760:	55                   	push   ebp
 761:	57                   	push   edi
 762:	56                   	push   esi
 763:	53                   	push   ebx
 764:	e8 c7 fd ff ff       	call   530 <__x86.get_pc_thunk.bx>
 769:	81 c3 5b 18 00 00    	add    ebx,0x185b
 76f:	83 ec 0c             	sub    esp,0xc
 772:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
 776:	8d b3 04 ff ff ff    	lea    esi,[ebx-0xfc]
 77c:	e8 bf fc ff ff       	call   440 <_init>
 781:	8d 83 00 ff ff ff    	lea    eax,[ebx-0x100]
 787:	29 c6                	sub    esi,eax
 789:	c1 fe 02             	sar    esi,0x2
 78c:	85 f6                	test   esi,esi
 78e:	74 25                	je     7b5 <__libc_csu_init+0x55>
 790:	31 ff                	xor    edi,edi
 792:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 798:	83 ec 04             	sub    esp,0x4
 79b:	55                   	push   ebp
 79c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 7a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 7a4:	ff 94 bb 00 ff ff ff 	call   DWORD PTR [ebx+edi*4-0x100]
 7ab:	83 c7 01             	add    edi,0x1
 7ae:	83 c4 10             	add    esp,0x10
 7b1:	39 fe                	cmp    esi,edi
 7b3:	75 e3                	jne    798 <__libc_csu_init+0x38>
 7b5:	83 c4 0c             	add    esp,0xc
 7b8:	5b                   	pop    ebx
 7b9:	5e                   	pop    esi
 7ba:	5f                   	pop    edi
 7bb:	5d                   	pop    ebp
 7bc:	c3                   	ret    
 7bd:	8d 76 00             	lea    esi,[esi+0x0]

000007c0 <__libc_csu_fini>:
 7c0:	f3 c3                	repz ret 
 7c2:	66 90                	xchg   ax,ax
 7c4:	66 90                	xchg   ax,ax
 7c6:	66 90                	xchg   ax,ax
 7c8:	66 90                	xchg   ax,ax
 7ca:	66 90                	xchg   ax,ax
 7cc:	66 90                	xchg   ax,ax
 7ce:	66 90                	xchg   ax,ax

000007d0 <__stack_chk_fail_local>:
 7d0:	53                   	push   ebx
 7d1:	e8 5a fd ff ff       	call   530 <__x86.get_pc_thunk.bx>
 7d6:	81 c3 ee 17 00 00    	add    ebx,0x17ee
 7dc:	83 ec 08             	sub    esp,0x8
 7df:	e8 bc fc ff ff       	call   4a0 <__stack_chk_fail@plt>

Disassembly of section .fini:

000007e4 <_fini>:
 7e4:	53                   	push   ebx
 7e5:	83 ec 08             	sub    esp,0x8
 7e8:	e8 43 fd ff ff       	call   530 <__x86.get_pc_thunk.bx>
 7ed:	81 c3 d7 17 00 00    	add    ebx,0x17d7
 7f3:	83 c4 08             	add    esp,0x8
 7f6:	5b                   	pop    ebx
 7f7:	c3                   	ret    
